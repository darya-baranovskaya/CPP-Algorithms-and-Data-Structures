/* using Dijkstra algorithm to find the easiest way to get from one repository to another using a File Manager, that supports only 3 ways of changing repository:
1) go one step up
2) go one step down
3) press Alt + prefix of file, where we need go, that will be the clozest to current position word with such prefix

#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <string>
using namespace std;

int up(int n, int i) {
    return((i == 0) ? (n - 1) : (i - 1));
}

int down(int n, int i) {
    return((i == n - 1) ? (0) : (i + 1));
}

int length_of_prefix(const std::string &first, const std::string &second) {
    int answer = 0;
    for (int i = 0; i < std::min(first.size(), second.size()); ++i) {
        if (first[i] != second[i]) {
            break;
        }
        else {
            ++answer;
        }
    }
    return answer;
}
void make_ans(const std::vector<std::string> &files,  std::vector<int> parent, int n, int finish, int start,
              vector<std::vector<int>> graph) {
    std::vector<int> path{ finish };
    int parent_vertex = parent[finish];
    while (parent_vertex != start) {
        path.push_back(parent_vertex);
        parent_vertex = parent[parent_vertex];
    }
    path.push_back(start);
    for (int i = path.size() - 1; i > 0; --i) {
        int from = path[i];
        int to = path[i - 1], size = n;
        bool fir = (from - to == 1), sec = (from - to == -size + 1), fir2 = (from - to == -1),
        sec2 = (from - to == n - 1);
        if (fir || sec || fir2 || sec2) {
            if (fir || sec) {
                cout << "up\n";
            }
            else if (fir2 || sec2) {
                cout << "down\n";
            }
        }
        else {
            cout << "Alt\n";
            string word(files[to].begin(), files[to].begin() + graph[from][to] - 1);
            for (auto letter : word) {
                cout << letter << "\n";
            }
        }
    }
}


void make_prefix(std::vector<std::vector<int>> &prefix,
                 vector<int> &prefix_for_sorted,
                 int i, int j) {
    if (i >= j - 1) {
        prefix[i][j] = prefix_for_sorted[i];
        prefix[j][i] = prefix_for_sorted[i];
    }
    else {
        make_prefix(prefix, prefix_for_sorted, i + 1, j);
        prefix[i][j] = min(prefix_for_sorted[i], prefix[i + 1][j]);
        prefix[j][i] = min(prefix_for_sorted[i], prefix[i + 1][j]);
    }
}

void update_distances(vector<vector<int>> &graph,
                      vector<std::vector<int>> &prefix,
                      map<int, int> &order, int i, int j) {
    if (i == up(graph.size(), j)) {
        graph[i][j] = prefix[order[i]][order[j]] + 2;
    }
    else {
        update_distances(graph, prefix, order, down(graph.size(), i), j);
        graph[i][j] = std::max(prefix[order[i]][order[j]] + 2, graph[down(graph.size(), i)][j]);
    }
}

void dijkstra(const std::vector<std::vector<int>> &graph, int start, int finish,
              const std::vector<std::string> &files) {
    std::vector<int> parent(graph.size(), -1);
    std::vector<bool> used(graph.size());
    std::vector<int> dist(graph.size(), -1);
    used.assign(used.size(), false);
    dist.assign(dist.size(), -1);
    dist[start] = 0;
    used[start] = true;
    std::queue<int> queue;
    queue.push(start);
    while (!queue.empty()) {
        int vertex = queue.front();
        used[vertex] = false;
        queue.pop();
        for (int u = 0; u < graph[vertex].size(); ++u) {
            bool discovered = dist[u] != -1;
            int closest_dist = dist[vertex] + graph[vertex][u];
            if (std::abs(vertex - u) == 1 || std::abs(vertex - u) == graph.size() - 1) {
                closest_dist = 1 + dist[vertex];
            }
            if (!discovered || dist[u] > closest_dist) {
                dist[u] = closest_dist;
                parent[u] = vertex;
                if (!used[u]) {
                    used[u] = true;
                    queue.push(u);
                }
            }
        }
    }
    std::cout << dist[finish] << "\n";
    if (dist[finish]) {
        make_ans(files, parent, graph.size(), finish, start, graph);
    }
}



map<int, int> make_order(vector<pair<string, int>> sorted) {
    map<int, int> order;
    for (int i = 0; i < sorted.size(); ++i) {
        for (int j = 0; j < sorted.size(); ++j) {
            if (sorted[j].second == i) {
                break;
            }
            else {
                ++order[i];
            }
        }
    }
    return order;
}

int main() {
    int n;
    cin >> n;
    vector<string> files(n);
    vector<pair<string, int>> sorted(n);
    for (int i = 0; i < n; ++i) {
        cin >> files[i];
        sorted[i] = { files[i], i };
    }
    sort(sorted.begin(), sorted.end());
    
    map<int, int> order = make_order(sorted);
    
    std::vector<int> prefix_for_sorted(n);
    for (int i = 0; i < n; ++i) {
        prefix_for_sorted[i] = length_of_prefix(sorted[i].first, sorted[down(n, i)].first);
    }
    
    std::vector<std::vector<int>> prefix(n, std::vector<int>(n, 1000000000));
    for (int i = 0; i < n; ++i) {
        prefix[i][i] = 0;
    }
    for (int i = 0; i < n; ++i) {
        make_prefix(prefix, prefix_for_sorted, 0, i);
    }
    
    std::vector<std::vector<int>> graph(n, std::vector<int>(n, 1000000000));
    for (int i = 0; i < n; ++i) {
        graph[i][i] = 0;
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (graph[i][j] == 1000000000) {
                update_distances(graph, prefix, order, i, j);
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (graph[i][j] > files[j].size() + 1) {
                graph[i][j] = 1000000000;
            }
        }
    }
    int k;
    std::cin >> k;
    int start = 0;
    for (int i = 0; i < k; ++i) {
        int finish;
        std::cin >> finish;
        --finish;
        dijkstra(graph, start, finish, files);
        start = finish;
    }
    return 0;
}

